/*
 * Copyright (c) 2016.  Joe
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This is the library version used when deploying the artifact
//gradlew bintrayUpload
// 使用def定义的是无类型

//闭包
def aClosure = {
        //闭包是一段代码，所以需要用花括号括起来..
    String param1, int param2 ->  //这个箭头很关键。箭头前面是参数定义，箭头后面是代码
        println "this is code1"
        println "this is code2"
        //这是代码，最后一句是返回值，
        param1 + param2
        //也可以使用return，和Groovy中普通函数一样
}

def greeting = { "Hello, $it!" }
assert 'Hello, Patrick!' == greeting('Patrick')
//等同于：
def greeting2 = { it -> "Hello, $it!" }
assert greeting('Patrick') == 'Hello, Patrick!'
//但是，如果在闭包定义时，采用下面这种写法，则表示闭包没有参数！


String testMethod(def str) {
    println(str)
    def test = "This is return value."//return 可以省略不写//最后的就是这个函数的返回值
}

//省略括号的情况
task test2 {
    afterEvaluate {
        println "hahahah"
    }
}

def testClosure(int a1, String b1, Closure closure) {
    //dosomething
    closure() //调用闭包
}


task test1() {
    def targetFile = new File("../checkstyle.xml")
    doLast() {
        println "test1 最后执行的内容！！"
    }

    //那么调用的时候，就可以免括号！
    testClosure(4, "test", {
        println "i am in closure"
    })


    def result = testMethod("xxxxxxxxxxxx")
//    int result = testMethod("xxxxxxxxxxxx")

    def closure = aClosure("这是10000000", 999)
    println(closure)
    println result

    def tag = 'git describe --tags'.execute([], project.rootDir).text.trim()
    println tag
    targetFile.withInputStream { iss ->
//    操作ism. 不用close。Groovy会自动替你close
        iss.readLines()
    }
}



task copyFile {
    def srcFile = new File("../checkstyle.xml")
    def targetFile = new File("checkstyle.xml")
    targetFile.withOutputStream { os ->
        srcFile.withInputStream { ins ->
            os << ins   //利用OutputStream的<<操作符重载，完成从inputstream到OutputStream的输出
        }
    }

    doLast() {
        srcFile.eachLine {
//            line -> println line
        }
        def aMap = ['key1': 'value1', 'key2': true, 'key3': true, 'key4': true]
        def all = aMap.findAll { key1, v -> v == true }

        println all.keySet()


    }

}


